---
title:  PHP缓存技术OB系统函数--静态缓存与局部缓存
layout: post
guid: urn:uuid:b87da13a-a4dd-402f-b06a-cef7eeee2d80
tags:
    - php
---
主要函数：


ob_start()函数:打开输出缓冲区.
函数格式
void ob_start(void)
说明：当缓冲区激活时，所有来自PHP程序的非文件头信息均不会发送，而是保存在内部缓冲区。为了输出缓冲区的内容，可以使用ob_end_flush()或flush()输出缓冲区的内容。

Flush：刷新缓冲区的内容，输出。
函数格式：flush()
说明：这个函数经常使用,效率很高。

ob_get_contents ：返回内部缓冲区的内容。
函数格式：string ob_get_contents(void)
说明：这个函数会返回当前缓冲区中的内容，如果输出缓冲区没有激活,则返回 FALSE.

ob_get_length：返回内部缓冲区的长度。
函数格式：int ob_get_length(void)
说明：这个函数会返回当前缓冲区中的长度；和ob_get_contents一样，如果输出缓冲区没有激活,则返回 FALSE.

ob_end_clean：删除内部缓冲区的内容，并且关闭内部缓冲区
函数格式：void ob_end_clean(void)
说明：这个函数不会输出内部缓冲区的内容而是把它删除

ob_end_flush: 发送内部缓冲区的内容到浏览器，并且关闭输出缓冲区
函数格式：void ob_end_flush(void)
说明：这个函数发送输出缓冲区的内容（如果有的话）

ob_implicit_flush：打开或关闭绝对刷新
函数格式：void ob_implicit_flush ([int flag])

说明：默认为关闭缓冲区，打开绝对输出后，每个脚本输出都直接发送到浏览器，不再需要调用 flush()


静态缓存的案例：

[python] view plain copy

    public function look(){  
        if(!is_file('k780.html')){  
            ob_start();  
            $this->load->view("k870");  
            $content=ob_get_contents();  
            $fb=fopen('k780.html',"w");  
            fwrite($fb,$content);  
            fclose($fb);  
        }else{  
            echo "I am is copy";  
            echo file_get_contents('k780.html');  
        }  
    }  




局部缓存（即在你所要想做的项目基础上进行添加，添加完成之后进行添加静态缓存.
[python] view plain copy

     <div class="top_uinfo" id="aaaa"></div>  
            <script>  
                $(function(){  
                    $.get('pos',function(e){  
                        $('#aaaa').html(e);  
                    })  
                })  
            </script>  
      
      
    public function pos(){  
        if(!empty($_COOKIE['name'])){  
            echo $_COOKIE['name'];  
            echo '<a href="logout">退出</a>';  
        }else{  
            echo '<a href="login">登陆</a>';  
        }  
    }  